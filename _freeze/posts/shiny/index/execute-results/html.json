{
  "hash": "9816642a070568f5580c650476a9a820",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mini intro a Chainy (_Shiny_)\"\ndescription: \"Ejemplo de visualizacion interactiva sobre solicitudes de informacion\"\nauthor: \"David Humberto Jiménez S.\"\ndate: \"2024-03-03\"\ncategories: [spanish, interactive, shiny]\nimage: \"shiny.jpg\"\n---\n\n\n# Bienvenides!\n\nA ustedes no les pasa que sienten que pueden hacer algo mejor, ¿pero no saben exactamente qué falta? A mí me pasa seguido, pero afortunadamente el internet tiene cosas preciosas que te invitan a intentarlo. Y luego de ver todas las cosas bonitas que se pueden hacer en [Shiny](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html) decidí seguir este [tutorial](https://laderast.github.io/gradual_shiny/), el [_cheatsheet_](https://raw.githubusercontent.com/rstudio/cheatsheets/main/shiny.pdf) y las recomendaciones de [_R ladies_](https://flor14.github.io/rladies_shiny_meetup_2020/rladies_shiny_2020#30)\n\nAhora, para no perder la bonita costumbre de trabajar con datos de solicitudes, también he estado leyendo sobre los modelos de _word embedding_ para Procesamiento de Lenguaje Natural (PLN) word2vec y doc2vec. En resumen, estos modelos de _machine learning_ lo que hacen es encontrar palabras por contextos similares (palabras adyacentes). Por ejemplo, nuestros teclados en los celulares de autocorrector, o cuando buscas algo en Google y completa el texto. Me he inspirado de diversos trabajos en español: como este [análisis de rap](https://www.kaggle.com/code/smunoz3801/word2vec-aprende-la-sem-ntica-del-rap-espa-ol), un ejercicio para [detectar noticias falsas](https://www.kaggle.com/code/haibaral/spanish-word2vec/notebook) y un artículo sobre un [centro de emergencias](http://www.rte.espol.edu.ec/index.php/tecnologica/article/view/844/540) de la Universidad del Azuay, Ecuador.\n\nEntonces, en esta entrada haré lo siguiente: de un conjunto de datos de solicitudes de información pública realizaré un clasificador temático con doc2vec, y los resultados serán presentados en una _web app_ interactiva para que la exploren por ustedes mismas, para que no vean solo lo que les presento.\n\nLas SIP utilizadas corresponden a las dieciséis alcaldías de la Ciudad de México, mi fuente de información es el Instituto Nacional de Transparencia, Acceso a la Información y Proteccion de Datos Personales ([INAI](https://www.plataformadetransparencia.org.mx/web/guest/datos_abiertos)) \n\n## Datos \n\nCuando buscas y descargas los “datos abiertos” de la Plataforma Nacional de Transparencia (PNT), te devuelve un archivo de tipo zip en tu correo. Desde que empiezas la búsqueda hasta recibir el correo pasan entre 15 y 20 minutos. \n\nPara conservar los datos de la manera en que se cargaron a la PNT, voy a reutilizar los csv de este proyecto pero que estoy haciendo en python. Posteriormente, voy a unir todos los archivos en una sola base de datos para utilizar _tidyverse_ para limpiar los datos. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(purrr)\nlibrary(readr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'readr' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(shiny)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'shiny' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(udpipe)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'udpipe' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(ggplot2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggplot2' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(doc2vec)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'doc2vec' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(word2vec)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'word2vec' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'lubridate'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n\n\n:::\n:::\n\n\nComo siempre, a mí me gusta ‘llamar’ las librerías con las que voy a trabajar en el primer código. Luego ‘leo’ todos los csv. En esta ocasión utilicé el paquete [reader](https://cran.r-project.org/web/packages/reader/index.html) en lugar de la función **base** de R _read.csv_ porque me salían mensajes de error por el encoding.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndirectory <- \"C:/Users/dhumb/Documents/projects/sip-alcaldias-nlp/data/SIP\"  \nfiles <- list.files(directory)\n\ndata <- map(files,\n            ~ read_csv(paste(directory, .x, sep = \"/\"), \n                       locale = locale(encoding = \"latin1\"),\n                       show_col_types = FALSE) %>% \n                         as_tibble() %>% \n                         mutate_all(as.character)) %>% \n  bind_rows() \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\nOne or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\nOne or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\nOne or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\nOne or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\nOne or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    FOLIO           FECHASOLICITUD     DEPENDENCIA          ESTATUS         \n Length:212235      Length:212235      Length:212235      Length:212235     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n MEDIOENTRADA       TIPOSOLICITUD      DESCRIPCIONSOLICITUD  OTROSDATOS       \n Length:212235      Length:212235      Length:212235        Length:212235     \n Class :character   Class :character   Class :character     Class :character  \n Mode  :character   Mode  :character   Mode  :character     Mode  :character  \n ARCHIVOADJUNTOSOLICITUD MEDIOENTREGA       FECHALIMITE       \n Length:212235           Length:212235      Length:212235     \n Class :character        Class :character   Class :character  \n Mode  :character        Mode  :character   Mode  :character  \n  RESPUESTA         TEXTORESPUESTA     FECHARESPUESTA     FECHASOLICITUDTERMINO\n Length:212235      Length:212235      Length:212235      Length:212235        \n Class :character   Class :character   Class :character   Class :character     \n Mode  :character   Mode  :character   Mode  :character   Mode  :character     \n     PAIS              ESTADO           MUNICIPIO         CODIGOPOSTAL      \n Length:212235      Length:212235      Length:212235      Length:212235     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n    SECTOR            PRORROGA          PREVENCION        DISPONIBILIDAD    \n Length:212235      Length:212235      Length:212235      Length:212235     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n TIPODERECHOARCOP      QUEJA          \n Length:212235      Length:212235     \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n```\n\n\n:::\n:::\n\n\nPosteriormente, hice una breve limpieza de datos. Había hecho una para reemplazar nombres de alcaldías, pero coinciden con aquellas solicitudes sobre datos personales.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data %>% \n  filter(TIPOSOLICITUD == 'Información pública') %>% #Porque solo nos interesan las SIP, y habia 16 de datos personales\n  mutate(\n    FECHASOLICITUD = dmy(FECHASOLICITUD),\n    FECHALIMITE = dmy(FECHALIMITE),\n    FECHARESPUESTA = dmy(FECHARESPUESTA),\n    FECHASOLICITUDTERMINO = dmy(FECHASOLICITUDTERMINO),\n    DEPENDENCIA = str_remove_all(DEPENDENCIA, \"Alcaldía\"),\n    DEPENDENCIA = str_trim(DEPENDENCIA, 'both'),\n    FOLIO = str_remove_all(FOLIO, \"[:punct:]\"),\n    FOLIO = str_remove_all(FOLIO, \"=\")\n  )\n\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    FOLIO           FECHASOLICITUD       DEPENDENCIA          ESTATUS         \n Length:208436      Min.   :2019-02-22   Length:208436      Length:208436     \n Class :character   1st Qu.:2020-03-08   Class :character   Class :character  \n Mode  :character   Median :2021-12-10   Mode  :character   Mode  :character  \n                    Mean   :2021-09-26                                        \n                    3rd Qu.:2023-03-08                                        \n                    Max.   :2024-02-25                                        \n                                                                              \n MEDIOENTRADA       TIPOSOLICITUD      DESCRIPCIONSOLICITUD  OTROSDATOS       \n Length:208436      Length:208436      Length:208436        Length:208436     \n Class :character   Class :character   Class :character     Class :character  \n Mode  :character   Mode  :character   Mode  :character     Mode  :character  \n                                                                              \n                                                                              \n                                                                              \n                                                                              \n ARCHIVOADJUNTOSOLICITUD MEDIOENTREGA        FECHALIMITE        \n Length:208436           Length:208436      Min.   :2019-03-08  \n Class :character        Class :character   1st Qu.:2020-04-20  \n Mode  :character        Mode  :character   Median :2022-01-13  \n                                            Mean   :2021-11-11  \n                                            3rd Qu.:2023-03-24  \n                                            Max.   :2024-03-15  \n                                            NA's   :380         \n  RESPUESTA         TEXTORESPUESTA     FECHARESPUESTA      \n Length:208436      Length:208436      Min.   :2019-02-26  \n Class :character   Class :character   1st Qu.:2020-04-20  \n Mode  :character   Mode  :character   Median :2021-12-16  \n                                       Mean   :2021-10-30  \n                                       3rd Qu.:2023-03-10  \n                                       Max.   :2024-02-25  \n                                       NA's   :1747        \n FECHASOLICITUDTERMINO     PAIS              ESTADO           MUNICIPIO        \n Min.   :2019-02-26    Length:208436      Length:208436      Length:208436     \n 1st Qu.:2020-04-20    Class :character   Class :character   Class :character  \n Median :2021-12-16    Mode  :character   Mode  :character   Mode  :character  \n Mean   :2021-10-29                                                            \n 3rd Qu.:2023-03-09                                                            \n Max.   :2024-02-25                                                            \n NA's   :2291                                                                  \n CODIGOPOSTAL          SECTOR            PRORROGA          PREVENCION       \n Length:208436      Length:208436      Length:208436      Length:208436     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n DISPONIBILIDAD     TIPODERECHOARCOP      QUEJA          \n Length:208436      Length:208436      Length:208436     \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                                                         \n```\n\n\n:::\n:::\n\n\nComo pueden observar, hay un total de 208,436 solicitudes para el periodo 2019-2024 en las 16 alcaldías de la CDMX. Luego, doc2vec tiene la restricción de que los textos no deben superar las mil palabras. Por eso cree la variable y aplique un filtro. Para terminar trabajando con 206,566 solicitudes. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data %>% \n  mutate(\n    txt_clean_word2vec(DESCRIPCIONSOLICITUD),\n    nword = txt_count_words(DESCRIPCIONSOLICITUD)\n  ) %>% \n  filter(nword > 0 & nword <= 1000)\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    FOLIO           FECHASOLICITUD       DEPENDENCIA          ESTATUS         \n Length:206566      Min.   :2019-02-22   Length:206566      Length:206566     \n Class :character   1st Qu.:2020-03-08   Class :character   Class :character  \n Mode  :character   Median :2021-12-01   Mode  :character   Mode  :character  \n                    Mean   :2021-09-26                                        \n                    3rd Qu.:2023-03-10                                        \n                    Max.   :2024-02-25                                        \n                                                                              \n MEDIOENTRADA       TIPOSOLICITUD      DESCRIPCIONSOLICITUD  OTROSDATOS       \n Length:206566      Length:206566      Length:206566        Length:206566     \n Class :character   Class :character   Class :character     Class :character  \n Mode  :character   Mode  :character   Mode  :character     Mode  :character  \n                                                                              \n                                                                              \n                                                                              \n                                                                              \n ARCHIVOADJUNTOSOLICITUD MEDIOENTREGA        FECHALIMITE        \n Length:206566           Length:206566      Min.   :2019-03-08  \n Class :character        Class :character   1st Qu.:2020-04-20  \n Mode  :character        Mode  :character   Median :2021-12-29  \n                                            Mean   :2021-11-11  \n                                            3rd Qu.:2023-03-29  \n                                            Max.   :2024-03-15  \n                                            NA's   :380         \n  RESPUESTA         TEXTORESPUESTA     FECHARESPUESTA      \n Length:206566      Length:206566      Min.   :2019-02-26  \n Class :character   Class :character   1st Qu.:2020-04-20  \n Mode  :character   Mode  :character   Median :2021-12-16  \n                                       Mean   :2021-10-30  \n                                       3rd Qu.:2023-03-15  \n                                       Max.   :2024-02-25  \n                                       NA's   :1747        \n FECHASOLICITUDTERMINO     PAIS              ESTADO           MUNICIPIO        \n Min.   :2019-02-26    Length:206566      Length:206566      Length:206566     \n 1st Qu.:2020-04-20    Class :character   Class :character   Class :character  \n Median :2021-12-14    Mode  :character   Mode  :character   Mode  :character  \n Mean   :2021-10-28                                                            \n 3rd Qu.:2023-03-14                                                            \n Max.   :2024-02-25                                                            \n NA's   :2291                                                                  \n CODIGOPOSTAL          SECTOR            PRORROGA          PREVENCION       \n Length:206566      Length:206566      Length:206566      Length:206566     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n DISPONIBILIDAD     TIPODERECHOARCOP      QUEJA          \n Length:206566      Length:206566      Length:206566     \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                                                         \n txt_clean_word2vec(DESCRIPCIONSOLICITUD)     nword        \n Length:206566                            Min.   :   1.00  \n Class :character                         1st Qu.:  29.00  \n Mode  :character                         Median :  55.00  \n                                          Mean   :  90.47  \n                                          3rd Qu.: 109.00  \n                                          Max.   :1000.00  \n                                                           \n```\n\n\n:::\n:::\n\n\n## Word2vec\n\nY ahora es momento de utilizar doc2vec. Para entenderlo, es necesario explicar que este es una extensión de la arquitectura de _machine learning_ word2vec. Esta detecta el contexto de las palabras de acuerdo a sus palabras vecinas. Hay dos modelos: _Continous Bag of Words_ (CBOW) que predice la palabra objetivo de acuerdo con las palabras de alrededor, y se recomienda para datos pequeños. Y el otro, _Continous Skip-Gram Model_ que funciona al revés: a partir de una palabra objetivo, predice las palabras de contexto. Este se recomienda para conjuntos de datos más grandes. \n\nAhora bien, doc2vec, como una extensión, permite al modelo “entender” frases, párrafos o documentos. Si leen el artículo [sobre emergencias en Ecuador](http://www.rte.espol.edu.ec/index.php/tecnologica/article/view/844/540) vienen varios artículos discutiendo las ventajas de uno sobre otro para determinados conjuntos de datos. Así que por facilidad, y porque además es solo el primer paso, se entrenará un modelo doc2vec. Para esto, utilizo los mismos parámetros del blog de [bnosac.be](http://www.bnosac.be/index.php/blog/103-doc2vec-in-R).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsip <- data %>% \n  select(FOLIO, DESCRIPCIONSOLICITUD) %>% \n  rename(\n    doc_id = FOLIO,\n    text = DESCRIPCIONSOLICITUD)\n\nmodel <- paragraph2vec(x=sip, type='PV-DBOW',\n                       dim = 150, iter = 10, min_count = 3, \n                       lr = 0.05, threads = 2)\n```\n:::\n\n\nY ya, con eso se genera el modelo. Sencillo, ¿no? Ahora, aún no descubro por qué, pero el modelo tiene menos renglones que los datos. Y justo por esta razón, mi idea original de utilizar un clasificador automático se fue al traste, pero no importa. Porque aún se puede hacer algo interesante con _chainy_.\n\n## Shiny\n\n[Shiny](https://shiny.posit.co/r/gallery/) es un entorno de trabajo basado en web para visualizaciones interactivas. En otras palabras, es una herramienta para que otras personas puedan interactuar con los análisis, gráficas, tablas y demás cosas que hagamos en R y Python. Y esto nos permite, entre muchas cosas, que las personas que no necesitan saber de datos puedan interactuar y ver lo que nosotras consideramos importante.\n\nAntes de entrar de lleno a _chainy_ es necesario entender que se puede hacer todo lo que ya sabemos hacer en R habitualmente. Con la diferencia de que hay que adaptarlo para que sea interactivo, es decir, que otra persona pueda ajustar cualquier valor, variable o parámetro sin necesidad de tocar el código. Por eso, uno de los posibles usos para el modelo que **doc2vec** que se entrenó antes, es encontrar documentos que tengan similitud con nuevas palabras. Como pueden ver en el siguiente ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimilar <- predict(model, \n                   newdata = c(\"agua\"), \n                   type = 'nearest', which = 'word2doc', top_n = 5)\nsimilar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n  term1         term2 similarity rank\n1  agua 0424000219620  0.6598905    1\n2  agua 0429000043820  0.6564962    2\n3  agua 0424000219720  0.6475419    3\n4  agua -Construcción  0.6281804    4\n5  agua       Espejos  0.6231290    5\n```\n\n\n:::\n:::\n\n\nY no es perfecto, pero sí nos muestra solicitudes que contengan la palabra, o palabras, que estemos buscando. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  filter(FOLIO==\"0424000219720\") %>% \n  select(DESCRIPCIONSOLICITUD)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  DESCRIPCIONSOLICITUD                                                          \n  <chr>                                                                         \n1 \"¿Cuántas pipas tiene la Alcaldía para reparto de agua?\\n¿De dónde se surten?…\n```\n\n\n:::\n:::\n\n\nShiny necesita dos secciones para funcionar: la UI (_User Interface_ o interfaz de usuario) que es lo que la persona va a ver: una gráfica, una tabla, un botón, sombra aquí, sombra allá, etc. Y el _Server_ que es donde van las funciones o la “lógica” de lo que queremos que haga nuestra aplicación de chainy. \n  \n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"Buscador de SIP por palabra\"),\n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"newdata\", \"Escribe una palabra:\", value = \"\"),\n      numericInput(\"top_n\", \"Máximo de solicitudes similares:\", value = 5, min = 1),\n      actionButton(\"submit\", \"Puchale aquí\")\n    ),\n    mainPanel(\n      tableOutput(\"similar_docs\")\n    )\n  )\n)\n```\n:::\n\n\nEn este código podemos observar lo siguiente: \n\n- **La funcion fluidpage()** sin la cual nada funciona, es como en ggplot.\n\n    - titlePanel, que nos permite poner un título al chainy.\n\n    - **sidebarLayout** que va a configurar lo que aparece a un ladito, en este caso, los parámetros que puede cambiar la persona\n\n        - textInput (la palabra)\n\n        - numericInput (el máximo de solicitudes que puede aparecer, como vimos en el ejemplo aparecen otros términos que no son el folio y así no nos sirve)\n\n        - actionButton (el botón que va a activar nuestra app)\n\n    - mainPanel en donde se va a mostrar lo que queremos, en este caso la tabla con las solicitudes.\n\nEn general, esta parte me parece que es autoexplicativa y tiene lógica sobre lo que queremos que la persona vea. Además, los nombres en inglés ‘newdata’, ‘top_n’ y ‘submit’ están relacionados con la parte del **server** porque de nada sirve que lo que se ve este muy bonito si no hace lo que queremos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output) {\n  \n  observeEvent(input$submit, {\n    req(input$newdata)\n    \n    similar <- predict(model, \n                       newdata = input$newdata, \n                       type = \"nearest\", \n                       which = \"word2doc\", \n                       top_n = input$top_n)\n    \n    similar <- similar[[1]]  #como es una lista, solo queremos el contenido\n    \n    similar_folio <- data %>%\n      filter(FOLIO %in% similar$term2) %>%\n      select(FOLIO, DESCRIPCIONSOLICITUD)\n    \n    output$similar_docs <- renderTable({\n      similar_folio\n    })\n  })\n}\n```\n:::\n\n\nEn este caso, todo funciona como cuando se define una función. Ya sé que yo no soy muy fan de las funciones porque #Tidyverse, pero la idea es que todo vaya dentro de las llaves **{ }** paso a pasito. En este caso, todo empieza cuando la persona presiona el botón. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output) {\n  \n  observeEvent(input$submit, {\n    req(input$newdata)\n    \n    similar <- predict(model, \n                       newdata = input$newdata, \n                       type = \"nearest\", \n                       which = \"word2doc\", \n                       top_n = input$top_n)\n    \n    similar <- similar[[1]]  #como es una lista, solo queremos el contenido\n    \n    similar_folio <- data %>%\n      filter(FOLIO %in% similar$term2) %>%\n      select(FOLIO, DESCRIPCIONSOLICITUD, FECHASOLICITUD)\n    \n    output$similar_docs <- renderTable({\n      similar_folio\n    })\n  })\n}\n```\n:::\n\n\nY por último podemos ver que de verdad nuestra app funcione. Pero antes, un disclaimer: esta shiny app es muuuuy sencilla, en este caso solo admite buscar una palabra y no hay mucho de interesante. Hay muchos ejemplos en internet, especialmente en la [galería de shiny](https://shiny.posit.co/r/gallery/) y no quise hacer un refrito de lo mismo. Por eso preferí frustrarme un rato con doc2vec. \n\n## It’s alive!!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n\nEntonces, para finalizar esta entrada, un shiny app necesita **3 elementos** (que no son flores, azúcar y muchos colores):\n\n- Una UI\n\n- Un server (o lógica, o lo que queramos mostrar)\n\n- La función shinyApp(ui = ui, server = server)\n\nPor último, dado que esto es un markdown (o un documento plano) no hay chance de que se vea la app de chainy. Entonces, trate de montarla en shinyapps.io Y es más difícil de lo que imagine. Así que, algunas consideraciones: el csv final (solo con folio, descripción y fecha) pesa 122 mb, así que lo convertí en un dataframe de R (rds) y pesa 22 mb. El modelo fue ajustado, porque como estaba originalmente era casi de 500 mb. Así que en la app final tiene 50 dimensiones y fue entrenado en 6 “hilos” en paralelo. Para revisar la app [puchale aquí](https://dhjsanchez.shinyapps.io/test/).\n\nComo siempre, mis DM están abiertos en [@dhumbertojs](https://twitter.com/dhumbertoj) y espero que pronto pueda poner comentarios en el blog. Si tienen alguna recomendación o sugerencia, siempre es bienvenida. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}